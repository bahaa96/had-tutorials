import { useEffect, useReducer } from "react";
import type { Class } from "../../domain-models/MyClass";
import { requestFetchMyClassesResults } from "../../network";

interface State {
  isLoading: boolean;
  pageSize: number;
  currentPageToken: string | null;
  nextPageToken: string | null;
  prevPageToken: string | null;
  filters?: {
    searchText?: string;
  };
  searchResults: SearchResultsItem[];
  totalCount: number;
  error: unknown;
}

type Action =
  | {
      type: "FETCH_ALL_START";
    }
  | {
      type: "FETCH_ALL_SUCCESS";
      searchResults: SearchResultsItem[];
      totalCount: number;
      nextPageToken: string | null;
      prevPageToken: string | null;
    }
  | {
      type: "FETCH_ALL_ERROR";
      error: unknown;
    }
  | ({
      type: "CHANGE_FILTERS";
    } & State["filters"])
  | {
      type: "CHANGE_PAGE";
      pageToken: string;
    };

type ActionHandlers = {
  [key in Action["type"]]: (
    state: State,
    action: Extract<Action, { type: key }>
  ) => State;
};

const initialState: State = {
  isLoading: false,
  currentPageToken: null,
  pageSize: 10,
  totalCount: 0,
  nextPageToken: null,
  prevPageToken: null,
  searchResults: [],
  error: null,
  filters: {},
};

const actionHandlers: ActionHandlers = {
  FETCH_ALL_START: (state, _action) => ({
    ...state,
    isLoading: true,
    error: null,
  }),
  FETCH_ALL_SUCCESS: (
    state,
    { totalCount, searchResults, nextPageToken, prevPageToken }
  ) => ({
    ...state,
    isLoading: false,
    searchResults,
    totalCount,
    nextPageToken,
    prevPageToken,
    pageCount: Math.ceil(totalCount / state.pageSize),
  }),
  FETCH_ALL_ERROR: (state, { error }) => ({
    ...state,
    isLoading: false,
    error,
  }),
  CHANGE_FILTERS: (state, { type, ...filters }) => ({
    ...state,
    isLoading: true,
    pageNumber: 0,
    filters,
  }),
  CHANGE_PAGE: (state, { pageToken }) => ({
    ...state,
    isLoading: true,
    currentPageToken: pageToken,
  }),
};

function reducer(state: State = initialState, action: Action): State {
  return actionHandlers[action.type]?.(state, action as any) || state;
}

const useMyClasses = (queryText: string) => {
  const [
    {
      isLoading,
      filters,
      pageSize,
      searchResults,
      totalCount,
      nextPageToken,
      prevPageToken,
      currentPageToken,
      error,
    },
    dispatch,
  ] = useReducer(reducer, {
    ...initialState,
    filters: {
      searchText: queryText,
    },
  });

  useEffect(() => {
    const controller = new AbortController();

    dispatch({ type: "FETCH_ALL_START" });

    requestFetchGraphSearchResults({
      rps: pageSize,
      q: filters?.searchText || "",
      pageToken: currentPageToken || undefined,
      options: {
        signal: controller.signal,
      },
    })
      .then(({ totalCount, data, nextPageToken, prevPageToken }) => {
        dispatch({
          type: "FETCH_ALL_SUCCESS",
          searchResults: data,
          nextPageToken,
          prevPageToken,
          totalCount,
        });
      })
      .catch((error) => {
        if (controller.signal.aborted) {
          return false;
        }
        dispatch({ type: "FETCH_ALL_ERROR", error });
      });
    return () => {
      controller.abort();
    };
  }, [filters, currentPageToken]);

  const changePage = (pageToken: string) =>
    dispatch({ type: "CHANGE_PAGE", pageToken });

  const changeFilters = (filters: State["filters"]) =>
    dispatch({ type: "CHANGE_FILTERS", ...filters });

  return {
    isLoading,
    pageSize,
    filters,
    searchResults,
    totalCount,
    prevPageToken,
    nextPageToken,
    error,
    changePage,
    changeFilters,
  };
};

export { useMyClasses };
